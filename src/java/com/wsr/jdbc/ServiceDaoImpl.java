/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.wsr.jdbc;

import com.wsr.dao.*;
import com.wsr.factory.*;
import java.util.Date;
import com.wsr.dto.*;
import com.wsr.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ServiceDaoImpl extends AbstractDAO implements ServiceDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT service_ID, service_name, service_WSDL, home_URL, description, owl_URL, user_rating, exe_duration, cost, rating_user_count, invoke_request_count, invoke_success_count, execute_success_count, published_date, checked_by_admin, publisher FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( service_ID, service_name, service_WSDL, home_URL, description, owl_URL, user_rating, exe_duration, cost, rating_user_count, invoke_request_count, invoke_success_count, execute_success_count, published_date, checked_by_admin, publisher ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET service_ID = ?, service_name = ?, service_WSDL = ?, home_URL = ?, description = ?, owl_URL = ?, user_rating = ?, exe_duration = ?, cost = ?, rating_user_count = ?, invoke_request_count = ?, invoke_success_count = ?, execute_success_count = ?, published_date = ?, checked_by_admin = ?, publisher = ? WHERE service_ID = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE service_ID = ?";

	/** 
	 * Index of column service_ID
	 */
	protected static final int COLUMN_SERVICE_ID = 1;

	/** 
	 * Index of column service_name
	 */
	protected static final int COLUMN_SERVICE_NAME = 2;

	/** 
	 * Index of column service_WSDL
	 */
	protected static final int COLUMN_SERVICE_WSDL = 3;

	/** 
	 * Index of column home_URL
	 */
	protected static final int COLUMN_HOME_URL = 4;

	/** 
	 * Index of column description
	 */
	protected static final int COLUMN_DESCRIPTION = 5;

	/** 
	 * Index of column owl_URL
	 */
	protected static final int COLUMN_OWL_URL = 6;

	/** 
	 * Index of column user_rating
	 */
	protected static final int COLUMN_USER_RATING = 7;

	/** 
	 * Index of column exe_duration
	 */
	protected static final int COLUMN_EXE_DURATION = 8;

	/** 
	 * Index of column cost
	 */
	protected static final int COLUMN_COST = 9;

	/** 
	 * Index of column rating_user_count
	 */
	protected static final int COLUMN_RATING_USER_COUNT = 10;

	/** 
	 * Index of column invoke_request_count
	 */
	protected static final int COLUMN_INVOKE_REQUEST_COUNT = 11;

	/** 
	 * Index of column invoke_success_count
	 */
	protected static final int COLUMN_INVOKE_SUCCESS_COUNT = 12;

	/** 
	 * Index of column execute_success_count
	 */
	protected static final int COLUMN_EXECUTE_SUCCESS_COUNT = 13;

	/** 
	 * Index of column published_date
	 */
	protected static final int COLUMN_PUBLISHED_DATE = 14;

	/** 
	 * Index of column checked_by_admin
	 */
	protected static final int COLUMN_CHECKED_BY_ADMIN = 15;

	/** 
	 * Index of column publisher
	 */
	protected static final int COLUMN_PUBLISHER = 16;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 16;

	/** 
	 * Index of primary-key column service_ID
	 */
	protected static final int PK_COLUMN_SERVICE_ID = 1;

	/** 
	 * Inserts a new row in the service table.
	 */
	public ServicePk insert(Service dto) throws ServiceDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setInt( index++, dto.getServiceId() );
			stmt.setString( index++, dto.getServiceName() );
			stmt.setString( index++, dto.getServiceWsdl() );
			stmt.setString( index++, dto.getHomeUrl() );
			stmt.setString( index++, dto.getDescription() );
			stmt.setString( index++, dto.getOwlUrl() );
			if (dto.isUserRatingNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getUserRating() );
			}
		
			if (dto.isExeDurationNull()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getExeDuration() );
			}
		
			if (dto.isCostNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getCost() );
			}
		
			if (dto.isRatingUserCountNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getRatingUserCount() );
			}
		
			if (dto.isInvokeRequestCountNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getInvokeRequestCount() );
			}
		
			if (dto.isInvokeSuccessCountNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getInvokeSuccessCount() );
			}
		
			if (dto.isExecuteSuccessCountNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getExecuteSuccessCount() );
			}
		
			stmt.setDate(index++, dto.getPublishedDate()==null ? null : new java.sql.Date( dto.getPublishedDate().getTime() ) );
			stmt.setBoolean( index++, dto.isCheckedByAdmin() );
			stmt.setInt( index++, dto.getPublisher() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			reset(dto);
			return dto.createPk();
		}
		catch (Throwable _e) {
			throw new ServiceDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the service table.
	 */
	public void update(ServicePk pk, Service dto) throws ServiceDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getServiceId() );
			stmt.setString( index++, dto.getServiceName() );
			stmt.setString( index++, dto.getServiceWsdl() );
			stmt.setString( index++, dto.getHomeUrl() );
			stmt.setString( index++, dto.getDescription() );
			stmt.setString( index++, dto.getOwlUrl() );
			if (dto.isUserRatingNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getUserRating() );
			}
		
			if (dto.isExeDurationNull()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getExeDuration() );
			}
		
			if (dto.isCostNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getCost() );
			}
		
			if (dto.isRatingUserCountNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getRatingUserCount() );
			}
		
			if (dto.isInvokeRequestCountNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getInvokeRequestCount() );
			}
		
			if (dto.isInvokeSuccessCountNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getInvokeSuccessCount() );
			}
		
			if (dto.isExecuteSuccessCountNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getExecuteSuccessCount() );
			}
		
			stmt.setDate(index++, dto.getPublishedDate()==null ? null : new java.sql.Date( dto.getPublishedDate().getTime() ) );
			stmt.setBoolean( index++, dto.isCheckedByAdmin() );
			stmt.setInt( index++, dto.getPublisher() );
			stmt.setInt( 17, pk.getServiceId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
		}
		catch (Throwable _e) {
			throw new ServiceDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the service table.
	 */
	public void delete(ServicePk pk) throws ServiceDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getServiceId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
		}
		catch (Throwable _e) {
			throw new ServiceDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the service table that matches the specified primary-key value.
	 */
	public Service findByPrimaryKey(ServicePk pk) throws ServiceDaoException
	{
		return findByPrimaryKey( pk.getServiceId() );
	}

	/** 
	 * Returns all rows from the service table that match the criteria 'service_ID = :serviceId'.
	 */
	public Service findByPrimaryKey(int serviceId) throws ServiceDaoException
	{
		Service ret[] = findByDynamicSelect( SQL_SELECT + " WHERE service_ID = ?", new Object[] {  new Integer(serviceId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the service table that match the criteria ''.
	 */
	public Service[] findAll() throws ServiceDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY service_ID", null );
	}

	/** 
	 * Returns all rows from the service table that match the criteria 'service_ID = :serviceId'.
	 */
	public Service[] findWhereServiceIdEquals(int serviceId) throws ServiceDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE service_ID = ? ORDER BY service_ID", new Object[] {  new Integer(serviceId) } );
	}

	/** 
	 * Returns all rows from the service table that match the criteria 'service_name = :serviceName'.
	 */
	public Service[] findWhereServiceNameEquals(String serviceName) throws ServiceDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE service_name = ? ORDER BY service_name", new Object[] { serviceName } );
	}

	/** 
	 * Returns all rows from the service table that match the criteria 'service_WSDL = :serviceWsdl'.
	 */
	public Service[] findWhereServiceWsdlEquals(String serviceWsdl) throws ServiceDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE service_WSDL = ? ORDER BY service_WSDL", new Object[] { serviceWsdl } );
	}

	/** 
	 * Returns all rows from the service table that match the criteria 'home_URL = :homeUrl'.
	 */
	public Service[] findWhereHomeUrlEquals(String homeUrl) throws ServiceDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE home_URL = ? ORDER BY home_URL", new Object[] { homeUrl } );
	}

	/** 
	 * Returns all rows from the service table that match the criteria 'description = :description'.
	 */
	public Service[] findWhereDescriptionEquals(String description) throws ServiceDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE description = ? ORDER BY description", new Object[] { description } );
	}

	/** 
	 * Returns all rows from the service table that match the criteria 'owl_URL = :owlUrl'.
	 */
	public Service[] findWhereOwlUrlEquals(String owlUrl) throws ServiceDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE owl_URL = ? ORDER BY owl_URL", new Object[] { owlUrl } );
	}

	/** 
	 * Returns all rows from the service table that match the criteria 'user_rating = :userRating'.
	 */
	public Service[] findWhereUserRatingEquals(int userRating) throws ServiceDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE user_rating = ? ORDER BY user_rating", new Object[] {  new Integer(userRating) } );
	}

	/** 
	 * Returns all rows from the service table that match the criteria 'exe_duration = :exeDuration'.
	 */
	public Service[] findWhereExeDurationEquals(double exeDuration) throws ServiceDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE exe_duration = ? ORDER BY exeDuration", new Object[] {  new Double(exeDuration) } );
	}

	/** 
	 * Returns all rows from the service table that match the criteria 'cost = :cost'.
	 */
	public Service[] findWhereCostEquals(float cost) throws ServiceDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE cost = ? ORDER BY cost", new Object[] {  new Float(cost) } );
	}

	/** 
	 * Returns all rows from the service table that match the criteria 'rating_user_count = :ratingUserCount'.
	 */
	public Service[] findWhereRatingUserCountEquals(int ratingUserCount) throws ServiceDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE rating_user_count = ? ORDER BY rating_user_count", new Object[] {  new Integer(ratingUserCount) } );
	}

	/** 
	 * Returns all rows from the service table that match the criteria 'invoke_request_count = :invokeRequestCount'.
	 */
	public Service[] findWhereInvokeRequestCountEquals(int invokeRequestCount) throws ServiceDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE invoke_request_count = ? ORDER BY invoke_request_count", new Object[] {  new Integer(invokeRequestCount) } );
	}

	/** 
	 * Returns all rows from the service table that match the criteria 'invoke_success_count = :invokeSuccessCount'.
	 */
	public Service[] findWhereInvokeSuccessCountEquals(int invokeSuccessCount) throws ServiceDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE invoke_success_count = ? ORDER BY invoke_success_count", new Object[] {  new Integer(invokeSuccessCount) } );
	}

	/** 
	 * Returns all rows from the service table that match the criteria 'execute_success_count = :executeSuccessCount'.
	 */
	public Service[] findWhereExecuteSuccessCountEquals(int executeSuccessCount) throws ServiceDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE execute_success_count = ? ORDER BY execute_success_count", new Object[] {  new Integer(executeSuccessCount) } );
	}

	/** 
	 * Returns all rows from the service table that match the criteria 'published_date = :publishedDate'.
	 */
	public Service[] findWherePublishedDateEquals(Date publishedDate) throws ServiceDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE published_date = ? ORDER BY publishedDate", new Object[] { publishedDate==null ? null : new java.sql.Date( publishedDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the service table that match the criteria 'checked_by_admin = :checkedByAdmin'.
	 */
	public Service[] findWhereCheckedByAdminEquals(boolean checkedByAdmin) throws ServiceDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE checked_by_admin = ?", new Object[] {  new Boolean(checkedByAdmin) } );
	}

	/** 
	 * Returns all rows from the service table that match the criteria 'publisher = :publisher'.
	 */
	public Service[] findWherePublisherEquals(int publisher) throws ServiceDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE publisher = ?", new Object[] {  new Integer(publisher) } );
	}

	/**
	 * Method 'ServiceDaoImpl'
	 * 
	 */
	public ServiceDaoImpl()
	{
	}

	/**
	 * Method 'ServiceDaoImpl'
	 * 
	 * @param userConn
	 */
	public ServiceDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "webservicerank.service";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Service fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Service dto = new Service();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Service[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Service dto = new Service();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Service ret[] = new Service[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Service dto, ResultSet rs) throws SQLException
	{
		dto.setServiceId( rs.getInt( COLUMN_SERVICE_ID ) );
		dto.setServiceName( rs.getString( COLUMN_SERVICE_NAME ) );
		dto.setServiceWsdl( rs.getString( COLUMN_SERVICE_WSDL ) );
		dto.setHomeUrl( rs.getString( COLUMN_HOME_URL ) );
		dto.setDescription( rs.getString( COLUMN_DESCRIPTION ) );
		dto.setOwlUrl( rs.getString( COLUMN_OWL_URL ) );
		dto.setUserRating( rs.getFloat( COLUMN_USER_RATING ) );
		if (rs.wasNull()) {
			dto.setUserRatingNull( true );
		}
		
		dto.setExeDuration( rs.getDouble( COLUMN_EXE_DURATION ) );
		if (rs.wasNull()) {
			dto.setExeDurationNull( true );
		}
		
		dto.setCost( rs.getFloat( COLUMN_COST ) );
		if (rs.wasNull()) {
			dto.setCostNull( true );
		}
		
		dto.setRatingUserCount( rs.getInt( COLUMN_RATING_USER_COUNT ) );
		if (rs.wasNull()) {
			dto.setRatingUserCountNull( true );
		}
		
		dto.setInvokeRequestCount( rs.getInt( COLUMN_INVOKE_REQUEST_COUNT ) );
		if (rs.wasNull()) {
			dto.setInvokeRequestCountNull( true );
		}
		
		dto.setInvokeSuccessCount( rs.getInt( COLUMN_INVOKE_SUCCESS_COUNT ) );
		if (rs.wasNull()) {
			dto.setInvokeSuccessCountNull( true );
		}
		
		dto.setExecuteSuccessCount( rs.getInt( COLUMN_EXECUTE_SUCCESS_COUNT ) );
		if (rs.wasNull()) {
			dto.setExecuteSuccessCountNull( true );
		}
		
		dto.setPublishedDate( rs.getDate(COLUMN_PUBLISHED_DATE ) );
		dto.setCheckedByAdmin( rs.getBoolean( COLUMN_CHECKED_BY_ADMIN ) );
		dto.setPublisher( rs.getInt( COLUMN_PUBLISHER ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Service dto)
	{
	}

	/** 
	 * Returns all rows from the service table that match the specified arbitrary SQL statement
	 */
	public Service[] findByDynamicSelect(String sql, Object[] sqlParams) throws ServiceDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Throwable _e) {
			throw new ServiceDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the service table that match the specified arbitrary SQL statement
	 */
	public Service[] findByDynamicWhere(String sql, Object[] sqlParams) throws ServiceDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Throwable _e) {
			throw new ServiceDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}


        public void updateRequestCounts(int s_id, int[] invoke_counts, long serviceTime) throws Throwable{
        try {
            Service[] services = findWhereServiceIdEquals(s_id);
            if (services != null && services.length != 0){
                invoke_counts[0] += services[0].getInvokeRequestCount();
                invoke_counts[1] += services[0].getInvokeSuccessCount();
                invoke_counts[2] += services[0].getExecuteSuccessCount();
                if (invoke_counts[2] != 0){
                    double newExeDur = (serviceTime + services[0].getExeDuration()* services[0].getExecuteSuccessCount())/invoke_counts[2];
                    services[0].setExeDuration(newExeDur);
                }
                services[0].setInvokeRequestCount(invoke_counts[0]);
                services[0].setInvokeSuccessCount(invoke_counts[1]);
                services[0].setExecuteSuccessCount(invoke_counts[2]);
                this.update(new ServicePk(s_id), services[0]);
            }
        } catch (ServiceDaoException ex) {
//            Logger.getLogger(ServiceDaoImpl.class.getName()).log(Level.SEVERE, null, ex);
            String error = (ex.getMessage() != null)?ex.getMessage():"";
            throw new Throwable("Error "+error);
        }
        }

        
}
