/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.wsr.dao;

import java.util.Date;
import com.wsr.dto.*;
import com.wsr.exceptions.*;

public interface ServiceDao
{
	/** 
	 * Inserts a new row in the service table.
	 */
	public ServicePk insert(Service dto) throws ServiceDaoException;

	/** 
	 * Updates a single row in the service table.
	 */
	public void update(ServicePk pk, Service dto) throws ServiceDaoException;

	/** 
	 * Deletes a single row in the service table.
	 */
	public void delete(ServicePk pk) throws ServiceDaoException;

	/** 
	 * Returns the rows from the service table that matches the specified primary-key value.
	 */
	public Service findByPrimaryKey(ServicePk pk) throws ServiceDaoException;

	/** 
	 * Returns all rows from the service table that match the criteria 'service_ID = :serviceId'.
	 */
	public Service findByPrimaryKey(int serviceId) throws ServiceDaoException;

	/** 
	 * Returns all rows from the service table that match the criteria ''.
	 */
	public Service[] findAll() throws ServiceDaoException;

	/** 
	 * Returns all rows from the service table that match the criteria 'service_ID = :serviceId'.
	 */
	public Service[] findWhereServiceIdEquals(int serviceId) throws ServiceDaoException;

	/** 
	 * Returns all rows from the service table that match the criteria 'service_name = :serviceName'.
	 */
	public Service[] findWhereServiceNameEquals(String serviceName) throws ServiceDaoException;

	/** 
	 * Returns all rows from the service table that match the criteria 'service_WSDL = :serviceWsdl'.
	 */
	public Service[] findWhereServiceWsdlEquals(String serviceWsdl) throws ServiceDaoException;

	/** 
	 * Returns all rows from the service table that match the criteria 'home_URL = :homeUrl'.
	 */
	public Service[] findWhereHomeUrlEquals(String homeUrl) throws ServiceDaoException;

	/** 
	 * Returns all rows from the service table that match the criteria 'description = :description'.
	 */
	public Service[] findWhereDescriptionEquals(String description) throws ServiceDaoException;

	/** 
	 * Returns all rows from the service table that match the criteria 'owl_URL = :owlUrl'.
	 */
	public Service[] findWhereOwlUrlEquals(String owlUrl) throws ServiceDaoException;

	/** 
	 * Returns all rows from the service table that match the criteria 'user_rating = :userRating'.
	 */
	public Service[] findWhereUserRatingEquals(int userRating) throws ServiceDaoException;

	/** 
	 * Returns all rows from the service table that match the criteria 'exe_duration = :exeDuration'.
	 */
	public Service[] findWhereExeDurationEquals(double exeDuration) throws ServiceDaoException;

	/** 
	 * Returns all rows from the service table that match the criteria 'cost = :cost'.
	 */
	public Service[] findWhereCostEquals(float cost) throws ServiceDaoException;

	/** 
	 * Returns all rows from the service table that match the criteria 'rating_user_count = :ratingUserCount'.
	 */
	public Service[] findWhereRatingUserCountEquals(int ratingUserCount) throws ServiceDaoException;

	/** 
	 * Returns all rows from the service table that match the criteria 'invoke_request_count = :invokeRequestCount'.
	 */
	public Service[] findWhereInvokeRequestCountEquals(int invokeRequestCount) throws ServiceDaoException;

	/** 
	 * Returns all rows from the service table that match the criteria 'invoke_success_count = :invokeSuccessCount'.
	 */
	public Service[] findWhereInvokeSuccessCountEquals(int invokeSuccessCount) throws ServiceDaoException;

	/** 
	 * Returns all rows from the service table that match the criteria 'execute_success_count = :executeSuccessCount'.
	 */
	public Service[] findWhereExecuteSuccessCountEquals(int executeSuccessCount) throws ServiceDaoException;

	/** 
	 * Returns all rows from the service table that match the criteria 'published_date = :publishedDate'.
	 */
	public Service[] findWherePublishedDateEquals(Date publishedDate) throws ServiceDaoException;

	/** 
	 * Returns all rows from the service table that match the criteria 'checked_by_admin = :checkedByAdmin'.
	 */
	public Service[] findWhereCheckedByAdminEquals(boolean checkedByAdmin) throws ServiceDaoException;

	/** 
	 * Returns all rows from the service table that match the criteria 'publisher = :publisher'.
	 */
	public Service[] findWherePublisherEquals(int publisher) throws ServiceDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the service table that match the specified arbitrary SQL statement
	 */
	public Service[] findByDynamicSelect(String sql, Object[] sqlParams) throws ServiceDaoException;

	/** 
	 * Returns all rows from the service table that match the specified arbitrary SQL statement
	 */
	public Service[] findByDynamicWhere(String sql, Object[] sqlParams) throws ServiceDaoException;

        /**
         * A method for updating the QoS parameters (except user rating)
         */
        public void updateRequestCounts(int s_id, int[] invoke_counts, long serviceTime) throws Throwable;

        
}
