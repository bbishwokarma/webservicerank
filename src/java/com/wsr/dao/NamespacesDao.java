/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.wsr.dao;

import com.wsr.dto.*;
import com.wsr.exceptions.*;

public interface NamespacesDao
{
	/** 
	 * Inserts a new row in the namespaces table.
	 */
	public NamespacesPk insert(Namespaces dto) throws NamespacesDaoException;

	/** 
	 * Updates a single row in the namespaces table.
	 */
	public void update(NamespacesPk pk, Namespaces dto) throws NamespacesDaoException;

	/** 
	 * Deletes a single row in the namespaces table.
	 */
	public void delete(NamespacesPk pk) throws NamespacesDaoException;

	/** 
	 * Returns the rows from the namespaces table that matches the specified primary-key value.
	 */
	public Namespaces findByPrimaryKey(NamespacesPk pk) throws NamespacesDaoException;

	/** 
	 * Returns all rows from the namespaces table that match the criteria 'ns_id = :nsId'.
	 */
	public Namespaces findByPrimaryKey(int nsId) throws NamespacesDaoException;

	/** 
	 * Returns all rows from the namespaces table that match the criteria ''.
	 */
	public Namespaces[] findAll() throws NamespacesDaoException;

	/** 
	 * Returns all rows from the namespaces table that match the criteria 'ns_id = :ns_id'.
	 */
	public Namespaces findByNS_ID(int ns_id) throws NamespacesDaoException;

	/** 
	 * Returns all rows from the namespaces table that match the criteria 'namespace = :namespace'.
	 */
	public Namespaces findByNamespace(String namespace) throws NamespacesDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the namespaces table that match the specified arbitrary SQL statement
	 */
	public Namespaces[] findByDynamicSelect(String sql, Object[] sqlParams) throws NamespacesDaoException;

	/** 
	 * Returns all rows from the namespaces table that match the specified arbitrary SQL statement
	 */
	public Namespaces[] findByDynamicWhere(String sql, Object[] sqlParams) throws NamespacesDaoException;

}
