/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.wsr.dao;

import com.wsr.dto.*;
import com.wsr.exceptions.*;

public interface PropertyDao
{
	/** 
	 * Inserts a new row in the property table.
	 */
	public PropertyPk insert(Property dto) throws PropertyDaoException;

	/** 
	 * Updates a single row in the property table.
	 */
	public void update(PropertyPk pk, Property dto) throws PropertyDaoException;

	/** 
	 * Deletes a single row in the property table.
	 */
	public void delete(PropertyPk pk) throws PropertyDaoException;

	/** 
	 * Returns the rows from the property table that matches the specified primary-key value.
	 */
	public Property findByPrimaryKey(PropertyPk pk) throws PropertyDaoException;

	/** 
	 * Returns all rows from the property table that match the criteria 'property_ID = :propertyId'.
	 */
	public Property findByPrimaryKey(int propertyId) throws PropertyDaoException;

	/** 
	 * Returns all rows from the property table that match the criteria ''.
	 */
	public Property[] findAll() throws PropertyDaoException;

	/** 
	 * Returns all rows from the property table that match the criteria 'property_ID = :propertyId'.
	 */
	public Property[] findWherePropertyIdEquals(int propertyId) throws PropertyDaoException;

	/** 
	 * Returns all rows from the property table that match the criteria 'property_name = :propertyName'.
	 */
	public Property[] findWherePropertyNameEquals(String propertyName) throws PropertyDaoException;

	/** 
	 * Returns all rows from the property table that match the criteria 'categorisation = :categorisation'.
	 */
	public Property[] findWhereCategorisationEquals(String categorisation) throws PropertyDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the property table that match the specified arbitrary SQL statement
	 */
	public Property[] findByDynamicSelect(String sql, Object[] sqlParams) throws PropertyDaoException;

	/** 
	 * Returns all rows from the property table that match the specified arbitrary SQL statement
	 */
	public Property[] findByDynamicWhere(String sql, Object[] sqlParams) throws PropertyDaoException;

}
